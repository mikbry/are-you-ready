name: Publish app

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME_WEB: web
  IMAGE_NAME_API: api  

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build --file ./infra/nginx/Dockerfile .
            docker build --file ./packages/backend/Dockerfile .
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

# Do Web Image
      - name: Build Web image
        run: docker build --file ./infra/nginx/Dockerfile . --tag $IMAGE_NAME_WEB

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push Web image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME_WEB
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME_WEB $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
# Do API Image
      - name: Build Api image
        run: docker build --file ./packages/backend/Dockerfile . --tag $IMAGE_NAME_API

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push Api image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME_API
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME_API $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION          

# Publish to Heroku
      - name: publish to heroku
        env : 
            HEROKU_REGISTRY_URL: registry.heroku.com
            HEROKU_API_KEY : ${{ secrets.HEROKU_API_KEY }}
        run : |
            docker login --username=_ --password $HEROKU_API_KEY $HEROKU_REGISTRY_URL
            docker tag $IMAGE_NAME_WEB registry.heroku.com/are-you-ready/web
            docker push registry.heroku.com/are-you-ready-live/web
            export HEROKU_API_KEY=$HEROKU_API_KEY
            heroku container:login
            heroku container:release web --app are-you-ready-live
            heroku ps:scale web=1 --app are-you-ready-live